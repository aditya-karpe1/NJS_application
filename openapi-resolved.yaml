openapi: 3.0.1
info:
  title: NJSAPI
  version: "1.0"
servers:
- url: /
paths:
  /api/BidPreparation:
    get:
      tags:
      - BidPreparation
      parameters:
      - name: opportunityId
        in: query
        required: false
        style: form
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BidPreparationDto'
            application/json:
              schema:
                $ref: '#/components/schemas/BidPreparationDto'
            text/json:
              schema:
                $ref: '#/components/schemas/BidPreparationDto'
    put:
      tags:
      - BidPreparation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BidPreparationUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/BidPreparationUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BidPreparationUpdateDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/BidPreparation/versions:
    get:
      tags:
      - BidPreparation
      parameters:
      - name: opportunityId
        in: query
        required: false
        style: form
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BidVersionHistoryDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BidVersionHistoryDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BidVersionHistoryDto'
  /api/BidPreparation/{opportunityId}/submit:
    post:
      tags:
      - BidPreparation
      parameters:
      - name: opportunityId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/BidPreparation/{opportunityId}/approve:
    post:
      tags:
      - BidPreparation
      parameters:
      - name: opportunityId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BidPreparationApprovalDto'
          text/json:
            schema:
              $ref: '#/components/schemas/BidPreparationApprovalDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BidPreparationApprovalDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/projects/{projectId}/changecontrols:
    get:
      tags:
      - ChangeControl
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChangeControlDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChangeControlDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChangeControlDto'
    post:
      tags:
      - ChangeControl
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeControlDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeControlDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeControlDto'
      responses:
        "201":
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/changecontrols/{id}:
    get:
      tags:
      - ChangeControl
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - ChangeControl
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeControlDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeControlDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeControlDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ChangeControlDto'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - ChangeControl
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/checkreview:
    get:
      tags:
      - CheckReview
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckReviewDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckReviewDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckReviewDto'
    post:
      tags:
      - CheckReview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheckReviewCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateCheckReviewCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCheckReviewCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
  /api/checkreview/{id}:
    get:
      tags:
      - CheckReview
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
    put:
      tags:
      - CheckReview
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCheckReviewCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCheckReviewCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCheckReviewCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CheckReviewDto'
    delete:
      tags:
      - CheckReview
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/checkreview/project/{projectId}:
    get:
      tags:
      - CheckReview
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckReviewDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckReviewDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckReviewDto'
  /api/Correspondence/inward:
    get:
      tags:
      - Correspondence
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceInwardDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceInwardDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceInwardDto'
    post:
      tags:
      - Correspondence
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCorrespondenceInwardCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateCorrespondenceInwardCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCorrespondenceInwardCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
  /api/Correspondence/inward/{id}:
    get:
      tags:
      - Correspondence
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
    put:
      tags:
      - Correspondence
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCorrespondenceInwardCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCorrespondenceInwardCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCorrespondenceInwardCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceInwardDto'
    delete:
      tags:
      - Correspondence
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/Correspondence/inward/project/{projectId}:
    get:
      tags:
      - Correspondence
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceInwardDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceInwardDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceInwardDto'
  /api/Correspondence/outward:
    get:
      tags:
      - Correspondence
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceOutwardDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceOutwardDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceOutwardDto'
    post:
      tags:
      - Correspondence
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCorrespondenceOutwardCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateCorrespondenceOutwardCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCorrespondenceOutwardCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
  /api/Correspondence/outward/{id}:
    get:
      tags:
      - Correspondence
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
    put:
      tags:
      - Correspondence
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCorrespondenceOutwardCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCorrespondenceOutwardCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCorrespondenceOutwardCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CorrespondenceOutwardDto'
    delete:
      tags:
      - Correspondence
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/Correspondence/outward/project/{projectId}:
    get:
      tags:
      - Correspondence
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceOutwardDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceOutwardDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorrespondenceOutwardDto'
  /api/Excel/export-options:
    get:
      tags:
      - Excel
      responses:
        "200":
          description: Success
  /api/feasibilitystudy:
    get:
      tags:
      - FeasibilityStudies
      responses:
        "200":
          description: Success
    post:
      tags:
      - FeasibilityStudies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeasibilityStudy'
          text/json:
            schema:
              $ref: '#/components/schemas/FeasibilityStudy'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FeasibilityStudy'
      responses:
        "200":
          description: Success
  /api/feasibilitystudy/{id}:
    get:
      tags:
      - FeasibilityStudies
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
    put:
      tags:
      - FeasibilityStudies
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeasibilityStudy'
          text/json:
            schema:
              $ref: '#/components/schemas/FeasibilityStudy'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FeasibilityStudy'
      responses:
        "200":
          description: Success
  /api/feasibilitystudy/project/{projectId}:
    get:
      tags:
      - FeasibilityStudies
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/GoNoGoDecision:
    get:
      tags:
      - GoNoGoDecision
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoNoGoDecision'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoNoGoDecision'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoNoGoDecision'
  /api/GoNoGoDecision/{id}:
    get:
      tags:
      - GoNoGoDecision
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GoNoGoDecision'
            application/json:
              schema:
                $ref: '#/components/schemas/GoNoGoDecision'
            text/json:
              schema:
                $ref: '#/components/schemas/GoNoGoDecision'
    put:
      tags:
      - GoNoGoDecision
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoNoGoDecision'
          text/json:
            schema:
              $ref: '#/components/schemas/GoNoGoDecision'
          application/*+json:
            schema:
              $ref: '#/components/schemas/GoNoGoDecision'
      responses:
        "200":
          description: Success
    delete:
      tags:
      - GoNoGoDecision
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/GoNoGoDecision/project/{projectId}:
    get:
      tags:
      - GoNoGoDecision
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GoNoGoDecision'
            application/json:
              schema:
                $ref: '#/components/schemas/GoNoGoDecision'
            text/json:
              schema:
                $ref: '#/components/schemas/GoNoGoDecision'
  /api/GoNoGoDecision/opportunity/{projectId}:
    get:
      tags:
      - GoNoGoDecision
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GoNoGoDecisionHeader'
            application/json:
              schema:
                $ref: '#/components/schemas/GoNoGoDecisionHeader'
            text/json:
              schema:
                $ref: '#/components/schemas/GoNoGoDecisionHeader'
  /api/GoNoGoDecision/createForm:
    post:
      tags:
      - GoNoGoDecision
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoNoGoForm'
          text/json:
            schema:
              $ref: '#/components/schemas/GoNoGoForm'
          application/*+json:
            schema:
              $ref: '#/components/schemas/GoNoGoForm'
      responses:
        "200":
          description: Success
  /api/GoNoGoDecision/{headerId}/versions:
    get:
      tags:
      - GoNoGoDecision
      parameters:
      - name: headerId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoNoGoVersionDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoNoGoVersionDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoNoGoVersionDto'
    post:
      tags:
      - GoNoGoDecision
      parameters:
      - name: headerId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGoNoGoVersionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateGoNoGoVersionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateGoNoGoVersionDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
  /api/GoNoGoDecision/{headerId}/versions/{versionNumber}:
    get:
      tags:
      - GoNoGoDecision
      parameters:
      - name: headerId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: versionNumber
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
  /api/GoNoGoDecision/{headerId}/versions/update:
    post:
      tags:
      - GoNoGoDecision
      parameters:
      - name: headerId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGoNoGoVersionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateGoNoGoVersionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateGoNoGoVersionDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
  /api/GoNoGoDecision/{headerId}/versions/{versionNumber}/approve:
    post:
      tags:
      - GoNoGoDecision
      parameters:
      - name: headerId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: versionNumber
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveGoNoGoVersionDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ApproveGoNoGoVersionDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ApproveGoNoGoVersionDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GoNoGoVersionDto'
  /api/GoNoGoDecisionOpportunity/GetScoringCriteria:
    get:
      tags:
      - GoNoGoDecisionOpportunity
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ScoringCriteria'
            application/json:
              schema:
                $ref: '#/components/schemas/ScoringCriteria'
            text/json:
              schema:
                $ref: '#/components/schemas/ScoringCriteria'
  /api/GoNoGoDecisionOpportunity/GetScoringRange:
    get:
      tags:
      - GoNoGoDecisionOpportunity
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ScoreRange'
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreRange'
            text/json:
              schema:
                $ref: '#/components/schemas/ScoreRange'
  /api/GoNoGoDecisionOpportunity/GetScoringRDescription:
    get:
      tags:
      - GoNoGoDecisionOpportunity
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoringDescriptionModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoringDescriptionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoringDescriptionModel'
  /api/InputRegister:
    get:
      tags:
      - InputRegister
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputRegisterDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputRegisterDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputRegisterDto'
    post:
      tags:
      - InputRegister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInputRegisterCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateInputRegisterCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateInputRegisterCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
  /api/InputRegister/{id}:
    get:
      tags:
      - InputRegister
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
    put:
      tags:
      - InputRegister
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInputRegisterCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateInputRegisterCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateInputRegisterCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
            application/json:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
            text/json:
              schema:
                $ref: '#/components/schemas/InputRegisterDto'
    delete:
      tags:
      - InputRegister
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/InputRegister/project/{projectId}:
    get:
      tags:
      - InputRegister
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputRegisterDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputRegisterDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputRegisterDto'
  /api/projects/{projectId}/jobstartforms:
    get:
      tags:
      - JobStartForm
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStartFormDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStartFormDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStartFormDto'
    post:
      tags:
      - JobStartForm
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStartFormDto'
          text/json:
            schema:
              $ref: '#/components/schemas/JobStartFormDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/JobStartFormDto'
      responses:
        "201":
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JobStartFormDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JobStartFormDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JobStartFormDto'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/jobstartforms/{id}:
    get:
      tags:
      - JobStartForm
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JobStartFormDto'
            application/json:
              schema:
                $ref: '#/components/schemas/JobStartFormDto'
            text/json:
              schema:
                $ref: '#/components/schemas/JobStartFormDto'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - JobStartForm
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStartFormDto'
          text/json:
            schema:
              $ref: '#/components/schemas/JobStartFormDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/JobStartFormDto'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - JobStartForm
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/jobstartforms/wbsresources:
    get:
      tags:
      - JobStartForm
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WBSResourceDataDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WBSResourceDataDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WBSResourceDataDto'
  /api/projects/{projectId}/jobstartforms/header/{formId}:
    get:
      tags:
      - JobStartFormHeader
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: formId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/JobStartFormHeader'
            application/json:
              schema:
                $ref: '#/components/schemas/JobStartFormHeader'
            text/json:
              schema:
                $ref: '#/components/schemas/JobStartFormHeader'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/jobstartforms/header/{formId}/status:
    get:
      tags:
      - JobStartFormHeader
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: formId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/jobstartforms/header/{formId}/history:
    get:
      tags:
      - JobStartFormHeader
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: formId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStartFormHistory'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStartFormHistory'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStartFormHistory'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/monthlyhours:
    get:
      tags:
      - MonthlyHours
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/projects/{projectId}/monthlyhours/tasks/{taskId}/monthlyhours:
    put:
      tags:
      - MonthlyHours
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: taskId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMonthlyHoursRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateMonthlyHoursRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateMonthlyHoursRequest'
      responses:
        "200":
          description: Success
  /api/MonthlyProgress:
    get:
      tags:
      - MonthlyProgress
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonthlyProgressDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonthlyProgressDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonthlyProgressDto'
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    post:
      tags:
      - MonthlyProgress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonthlyProgressDto'
          text/json:
            schema:
              $ref: '#/components/schemas/MonthlyProgressDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MonthlyProgressDto'
      responses:
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/MonthlyProgress/{id}:
    get:
      tags:
      - MonthlyProgress
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MonthlyProgressDto'
            application/json:
              schema:
                $ref: '#/components/schemas/MonthlyProgressDto'
            text/json:
              schema:
                $ref: '#/components/schemas/MonthlyProgressDto'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    put:
      tags:
      - MonthlyProgress
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonthlyProgressDto'
          text/json:
            schema:
              $ref: '#/components/schemas/MonthlyProgressDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MonthlyProgressDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MonthlyProgressDto'
            application/json:
              schema:
                $ref: '#/components/schemas/MonthlyProgressDto'
            text/json:
              schema:
                $ref: '#/components/schemas/MonthlyProgressDto'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    delete:
      tags:
      - MonthlyProgress
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        "500":
          description: Server Error
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/OpportunityTracking:
    get:
      tags:
      - OpportunityTracking
      parameters:
      - name: status
        in: query
        required: false
        style: form
        schema:
          $ref: '#/components/schemas/OpportunityTrackingStatus'
      - name: stage
        in: query
        required: false
        style: form
        schema:
          $ref: '#/components/schemas/OpportunityStage'
      - name: bidManagerId
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: clientSector
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: pageNumber
        in: query
        required: false
        style: form
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: false
        style: form
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: isAscending
        in: query
        required: false
        style: form
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Success
    post:
      tags:
      - OpportunityTracking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOpportunityTrackingCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateOpportunityTrackingCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateOpportunityTrackingCommand'
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/bid-manager/{bidManagerId}:
    get:
      tags:
      - OpportunityTracking
      parameters:
      - name: bidManagerId
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/regional-manager/{regionalManagerId}:
    get:
      tags:
      - OpportunityTracking
      parameters:
      - name: regionalManagerId
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/regional-director/{regionalDirectorId}:
    get:
      tags:
      - OpportunityTracking
      parameters:
      - name: regionalDirectorId
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/{id}:
    get:
      tags:
      - OpportunityTracking
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
    delete:
      tags:
      - OpportunityTracking
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/project/{projectId}:
    get:
      tags:
      - OpportunityTracking
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: status
        in: query
        required: false
        style: form
        schema:
          $ref: '#/components/schemas/OpportunityTrackingStatus'
      - name: stage
        in: query
        required: false
        style: form
        schema:
          $ref: '#/components/schemas/OpportunityStage'
      - name: bidManagerId
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: clientSector
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: pageNumber
        in: query
        required: false
        style: form
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: false
        style: form
        schema:
          type: integer
          format: int32
          default: 10
      - name: sortBy
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: isAscending
        in: query
        required: false
        style: form
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/UpdateOpportunityTracking/{id}:
    put:
      tags:
      - OpportunityTracking
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOpportunityTrackingCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateOpportunityTrackingCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateOpportunityTrackingCommand'
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/SendToReview:
    post:
      tags:
      - OpportunityTracking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendToReviewCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/SendToReviewCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SendToReviewCommand'
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/SendToApproval:
    post:
      tags:
      - OpportunityTracking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendToApprovalCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/SendToApprovalCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SendToApprovalCommand'
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/SendToApprove:
    post:
      tags:
      - OpportunityTracking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendToApproveCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/SendToApproveCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SendToApproveCommand'
      responses:
        "200":
          description: Success
  /api/OpportunityTracking/Reject:
    post:
      tags:
      - OpportunityTracking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectOpportunityCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/RejectOpportunityCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RejectOpportunityCommand'
      responses:
        "200":
          description: Success
  /api/PMWorkflow/sendToReview:
    post:
      tags:
      - PMWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSendToReviewCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectSendToReviewCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectSendToReviewCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/PMWorkflow/sendToApproval:
    post:
      tags:
      - PMWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSendToApprovalCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectSendToApprovalCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectSendToApprovalCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/PMWorkflow/requestChanges:
    post:
      tags:
      - PMWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestChangesCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/RequestChangesCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RequestChangesCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/PMWorkflow/approve:
    post:
      tags:
      - PMWorkflow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ApproveCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ApproveCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowDto'
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/PMWorkflow/history/{entityType}/{entityId}:
    get:
      tags:
      - PMWorkflow
      parameters:
      - name: entityType
        in: path
        required: true
        style: simple
        schema:
          type: string
      - name: entityId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PMWorkflowHistoryDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowHistoryDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PMWorkflowHistoryDto'
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/PMWorkflow/canView/{entityType}/{entityId}:
    get:
      tags:
      - PMWorkflow
      parameters:
      - name: entityType
        in: path
        required: true
        style: simple
        schema:
          type: string
      - name: entityId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/Project:
    get:
      tags:
      - Project
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      tags:
      - Project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectDto'
      responses:
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "500":
          description: Server Error
  /api/Project/{id}:
    get:
      tags:
      - Project
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Project'
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            text/json:
              schema:
                $ref: '#/components/schemas/Project'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - Project
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ProjectDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProjectDto'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "500":
          description: Server Error
    delete:
      tags:
      - Project
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        "500":
          description: Server Error
  /api/Project/getByUserId/{userId}:
    get:
      tags:
      - Project
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Project'
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
            text/json:
              schema:
                $ref: '#/components/schemas/Project'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/Project/{id}/feasibility-study:
    get:
      tags:
      - Project
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FeasibilityStudy'
            application/json:
              schema:
                $ref: '#/components/schemas/FeasibilityStudy'
            text/json:
              schema:
                $ref: '#/components/schemas/FeasibilityStudy'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
      - Project
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeasibilityStudyCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateFeasibilityStudyCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateFeasibilityStudyCommand'
      responses:
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "500":
          description: Server Error
  /api/ProjectClosure:
    get:
      tags:
      - ProjectClosure
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectClosureDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectClosureDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectClosureDto'
    post:
      tags:
      - ProjectClosure
      requestBody:
        content:
          application/json:
            schema: {}
          text/json:
            schema: {}
          application/*+json:
            schema: {}
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "500":
          description: Server Error
  /api/ProjectClosure/{id}:
    get:
      tags:
      - ProjectClosure
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectClosureDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectClosureDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectClosureDto'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - ProjectClosure
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema: {}
          text/json:
            schema: {}
          application/*+json:
            schema: {}
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "500":
          description: Server Error
    delete:
      tags:
      - ProjectClosure
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "500":
          description: Server Error
  /api/ProjectClosure/project/{projectId}:
    get:
      tags:
      - ProjectClosure
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProjectClosureDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectClosureDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProjectClosureDto'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/ProjectClosure/available-projects:
    get:
      tags:
      - ProjectClosure
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items: {}
            application/json:
              schema:
                type: array
                items: {}
            text/json:
              schema:
                type: array
                items: {}
        "500":
          description: Server Error
  /api/ProjectClosure/project/{projectId}/all:
    get:
      tags:
      - ProjectClosure
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectClosureDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectClosureDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectClosureDto'
  /api/resources/roles:
    get:
      tags:
      - Resource
      responses:
        "200":
          description: Success
  /api/resources/employees:
    get:
      tags:
      - Resource
      responses:
        "200":
          description: Success
  /api/resources/employees/{id}:
    get:
      tags:
      - Resource
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
  /api/resources/projects/{projectId}:
    get:
      tags:
      - Resource
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/Role:
    get:
      tags:
      - Role
      responses:
        "200":
          description: Success
    post:
      tags:
      - Role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDefination'
          text/json:
            schema:
              $ref: '#/components/schemas/RoleDefination'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoleDefination'
      responses:
        "200":
          description: Success
  /api/Role/getRolesWithPermissions:
    get:
      tags:
      - Role
      responses:
        "200":
          description: Success
  /api/Role/getPermissionsByGroupedByCategory:
    get:
      tags:
      - Role
      responses:
        "200":
          description: Success
  /api/Role/{roleId}:
    get:
      tags:
      - Role
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionDto'
    put:
      tags:
      - Role
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDefination'
          text/json:
            schema:
              $ref: '#/components/schemas/RoleDefination'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RoleDefination'
      responses:
        "200":
          description: Success
    delete:
      tags:
      - Role
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
  /api/Role/GetRoleByName/{roleName}:
    get:
      tags:
      - Role
      parameters:
      - name: roleName
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RoleDto'
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
            text/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
  /api/ScoringDescription:
    get:
      tags:
      - ScoringDescription
      responses:
        "200":
          description: Success
  /api/User/login:
    post:
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginModel'
      responses:
        "200":
          description: Success
  /api/User:
    get:
      tags:
      - User
      parameters:
      - name: RoleFilter
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: IsConsultantFilter
        in: query
        required: false
        style: form
        schema:
          type: boolean
      - name: PageNumber
        in: query
        required: false
        style: form
        schema:
          type: integer
          format: int32
      - name: PageSize
        in: query
        required: false
        style: form
        schema:
          type: integer
          format: int32
      - name: SearchTerm
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: SortBy
        in: query
        required: false
        style: form
        schema:
          type: string
      - name: IsAscending
        in: query
        required: false
        style: form
        schema:
          type: boolean
      responses:
        "200":
          description: Success
  /api/User/{id}:
    get:
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
    put:
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
      responses:
        "200":
          description: Success
    delete:
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
  /api/User/Create:
    post:
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
      responses:
        "200":
          description: Success
  /api/User/roles:
    get:
      tags:
      - User
      responses:
        "200":
          description: Success
  /api/User/by-role/{roleName}:
    get:
      tags:
      - User
      parameters:
      - name: roleName
        in: path
        required: true
        style: simple
        schema:
          type: string
      responses:
        "200":
          description: Success
  /api/User/permissions:
    get:
      tags:
      - User
      responses:
        "200":
          description: Success
  /api/projects/{projectId}/WBS:
    get:
      tags:
      - WBS
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WBSStructureDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WBSStructureDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WBSStructureDto'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - WBS
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/WBSTaskDto'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/WBSTaskDto'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/WBSTaskDto'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/WBS/tasks:
    post:
      tags:
      - WBS
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WBSTaskDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WBSTaskDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WBSTaskDto'
      responses:
        "201":
          description: Created
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WBSTaskDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WBSTaskDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WBSTaskDto'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/WBS/tasks/{taskId}:
    put:
      tags:
      - WBS
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: taskId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WBSTaskDto'
          text/json:
            schema:
              $ref: '#/components/schemas/WBSTaskDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WBSTaskDto'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - WBS
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: taskId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/WBS/manpowerresources:
    get:
      tags:
      - WBS
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ManpowerResourcesWithMonthlyHoursDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ManpowerResourcesWithMonthlyHoursDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ManpowerResourcesWithMonthlyHoursDto'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        "500":
          description: Server Error
  /api/projects/{projectId}/wbs/header/{taskType}:
    get:
      tags:
      - WBSHeader
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: taskType
        in: path
        required: true
        style: simple
        schema:
          $ref: '#/components/schemas/TaskType'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WBSTaskMonthlyHourHeader'
            application/json:
              schema:
                $ref: '#/components/schemas/WBSTaskMonthlyHourHeader'
            text/json:
              schema:
                $ref: '#/components/schemas/WBSTaskMonthlyHourHeader'
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/projects/{projectId}/wbs/header/{taskType}/status:
    get:
      tags:
      - WBSHeader
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      - name: taskType
        in: path
        required: true
        style: simple
        schema:
          $ref: '#/components/schemas/TaskType'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/WBSOptions:
    get:
      tags:
      - WBSOptions
      parameters:
      - name: formType
        in: query
        required: false
        style: form
        schema:
          $ref: '#/components/schemas/FormType'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WBSLevelOptionsDto'
            application/json:
              schema:
                $ref: '#/components/schemas/WBSLevelOptionsDto'
            text/json:
              schema:
                $ref: '#/components/schemas/WBSLevelOptionsDto'
  /api/WBSOptions/level1:
    get:
      tags:
      - WBSOptions
      parameters:
      - name: formType
        in: query
        required: false
        style: form
        schema:
          $ref: '#/components/schemas/FormType'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
  /api/WBSOptions/level2:
    get:
      tags:
      - WBSOptions
      parameters:
      - name: formType
        in: query
        required: false
        style: form
        schema:
          $ref: '#/components/schemas/FormType'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
  /api/WBSOptions/level3/{level2Value}:
    get:
      tags:
      - WBSOptions
      parameters:
      - name: level2Value
        in: path
        required: true
        style: simple
        schema:
          type: string
      - name: formType
        in: query
        required: false
        style: form
        schema:
          $ref: '#/components/schemas/FormType'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WBSOptionDto'
  /api/wbs/project/{projectId}:
    get:
      tags:
      - WorkBreakdownStructures
      parameters:
      - name: projectId
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/wbs/{id}:
    get:
      tags:
      - WorkBreakdownStructures
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
    put:
      tags:
      - WorkBreakdownStructures
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkBreakdownStructure'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkBreakdownStructure'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkBreakdownStructure'
      responses:
        "200":
          description: Success
    delete:
      tags:
      - WorkBreakdownStructures
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
  /api/wbs:
    post:
      tags:
      - WorkBreakdownStructures
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkBreakdownStructure'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkBreakdownStructure'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkBreakdownStructure'
      responses:
        "200":
          description: Success
components:
  schemas:
    ApproveCommand:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        entityType:
          type: string
          nullable: true
        assignedToId:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
      additionalProperties: false
    ApproveGoNoGoVersionDto:
      type: object
      properties:
        approvedBy:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
      additionalProperties: false
    BidPreparationApprovalDto:
      type: object
      properties:
        opportunityId:
          type: integer
          format: int32
        isApproved:
          type: boolean
        comments:
          type: string
          nullable: true
      additionalProperties: false
    BidPreparationDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        opportunityId:
          type: integer
          format: int32
        documentCategoriesJson:
          type: string
          nullable: true
        userId:
          type: string
          nullable: true
        version:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/BidPreparationStatus'
        comments:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
        versionHistory:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/BidVersionHistoryDto'
      additionalProperties: false
    BidPreparationStatus:
      type: integer
      format: int32
      enum:
      - 0
      - 1
      - 2
      - 3
    BidPreparationUpdateDto:
      type: object
      properties:
        documentCategoriesJson:
          type: string
          nullable: true
        opportunityId:
          type: integer
          format: int32
        comments:
          type: string
          nullable: true
      additionalProperties: false
    BidVersionHistoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        bidPreparationId:
          type: integer
          format: int32
        version:
          type: integer
          format: int32
        documentCategoriesJson:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/BidPreparationStatus'
        comments:
          type: string
          nullable: true
        modifiedBy:
          type: string
          nullable: true
        modifiedDate:
          type: string
          format: date-time
      additionalProperties: false
    BudgetTableDto:
      type: object
      properties:
        originalBudget:
          $ref: '#/components/schemas/OriginalBudgetDto'
        currentBudgetInMIS:
          $ref: '#/components/schemas/CurrentBudgetInMISDto'
        percentCompleteOnCosts:
          $ref: '#/components/schemas/PercentCompleteOnCostsDto'
      additionalProperties: false
    CTCEACDto:
      type: object
      properties:
        ctcODC:
          type: number
          format: double
        ctcStaff:
          type: number
          format: double
        ctcSubtotal:
          type: number
          format: double
        totalEAC:
          type: number
          format: double
        grossProfitPercentage:
          type: number
          format: double
      additionalProperties: false
    ChangeControl:
      required:
      - dateLogged
      - description
      - originator
      - projectId
      - srNo
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        srNo:
          type: integer
          format: int32
        dateLogged:
          type: string
          format: date-time
        originator:
          maxLength: 100
          minLength: 0
          type: string
        description:
          maxLength: 500
          minLength: 0
          type: string
        costImpact:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        timeImpact:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        resourcesImpact:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        qualityImpact:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        changeOrderStatus:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        clientApprovalStatus:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        claimSituation:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        project:
          $ref: '#/components/schemas/Project'
        workflowStatusId:
          type: integer
          format: int32
        workflowStatus:
          $ref: '#/components/schemas/PMWorkflowStatus'
        workflowHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ChangeControlWorkflowHistory'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        createdBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        updatedBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
      additionalProperties: false
    ChangeControlDto:
      required:
      - dateLogged
      - description
      - originator
      - projectId
      - srNo
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        srNo:
          type: integer
          format: int32
        dateLogged:
          type: string
          format: date-time
        originator:
          maxLength: 100
          minLength: 0
          type: string
        description:
          maxLength: 500
          minLength: 0
          type: string
        costImpact:
          type: string
          nullable: true
        timeImpact:
          type: string
          nullable: true
        resourcesImpact:
          type: string
          nullable: true
        qualityImpact:
          type: string
          nullable: true
        changeOrderStatus:
          type: string
          nullable: true
        clientApprovalStatus:
          type: string
          nullable: true
        claimSituation:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        createdBy:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
        workflowHistory:
          $ref: '#/components/schemas/ChangeControlWorkflowHistoryDto'
      additionalProperties: false
    ChangeControlWorkflowHistory:
      required:
      - action
      - actionBy
      type: object
      properties:
        id:
          type: integer
          format: int32
        changeControlId:
          type: integer
          format: int32
        statusId:
          type: integer
          format: int32
        action:
          minLength: 1
          type: string
        comments:
          type: string
          nullable: true
        actionDate:
          type: string
          format: date-time
        actionBy:
          minLength: 1
          type: string
        assignedToId:
          type: string
          nullable: true
        changeControl:
          $ref: '#/components/schemas/ChangeControl'
        status:
          $ref: '#/components/schemas/PMWorkflowStatus'
        actionUser:
          $ref: '#/components/schemas/User'
        assignedTo:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    ChangeControlWorkflowHistoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        changeControlId:
          type: integer
          format: int32
        actionDate:
          type: string
          format: date-time
        comments:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        statusId:
          type: integer
          format: int32
        action:
          type: string
          nullable: true
        actionBy:
          type: string
          nullable: true
        assignedToId:
          type: string
          nullable: true
      additionalProperties: false
    ChangeOrderDto:
      type: object
      properties:
        contractTotal:
          type: number
          format: double
        cost:
          type: number
          format: double
        fee:
          type: number
          format: double
        summaryDetails:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
      additionalProperties: false
    CheckReviewDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        activityNo:
          type: string
          nullable: true
        activityName:
          type: string
          nullable: true
        documentNumber:
          type: string
          nullable: true
        documentName:
          type: string
          nullable: true
        objective:
          type: string
          nullable: true
        references:
          type: string
          nullable: true
        fileName:
          type: string
          nullable: true
        qualityIssues:
          type: string
          nullable: true
        completion:
          type: string
          nullable: true
        checkedBy:
          type: string
          nullable: true
        approvedBy:
          type: string
          nullable: true
        actionTaken:
          type: string
          nullable: true
        maker:
          type: string
          nullable: true
        checker:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        createdBy:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    ContractAndCostDto:
      type: object
      properties:
        contractType:
          type: string
          nullable: true
        percentage:
          type: number
          format: double
        actualOdcs:
          type: number
          format: double
        actualStaff:
          type: number
          format: double
        actualSubtotal:
          type: number
          format: double
      additionalProperties: false
    CorrespondenceInwardDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        incomingLetterNo:
          type: string
          nullable: true
        letterDate:
          type: string
          format: date-time
        njsInwardNo:
          type: string
          nullable: true
        receiptDate:
          type: string
          format: date-time
        from:
          type: string
          nullable: true
        subject:
          type: string
          nullable: true
        attachmentDetails:
          type: string
          nullable: true
        actionTaken:
          type: string
          nullable: true
        storagePath:
          type: string
          nullable: true
        remarks:
          type: string
          nullable: true
        repliedDate:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        createdBy:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    CorrespondenceOutwardDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        letterNo:
          type: string
          nullable: true
        letterDate:
          type: string
          format: date-time
        to:
          type: string
          nullable: true
        subject:
          type: string
          nullable: true
        attachmentDetails:
          type: string
          nullable: true
        actionTaken:
          type: string
          nullable: true
        storagePath:
          type: string
          nullable: true
        remarks:
          type: string
          nullable: true
        acknowledgement:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        createdBy:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    CreateCheckReviewCommand:
      type: object
      properties:
        projectId:
          type: integer
          format: int32
        activityNo:
          type: string
          nullable: true
        activityName:
          type: string
          nullable: true
        documentNumber:
          type: string
          nullable: true
        documentName:
          type: string
          nullable: true
        objective:
          type: string
          nullable: true
        references:
          type: string
          nullable: true
        fileName:
          type: string
          nullable: true
        qualityIssues:
          type: string
          nullable: true
        completion:
          type: string
          nullable: true
        checkedBy:
          type: string
          nullable: true
        approvedBy:
          type: string
          nullable: true
        actionTaken:
          type: string
          nullable: true
        maker:
          type: string
          nullable: true
        checker:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
      additionalProperties: false
    CreateCorrespondenceInwardCommand:
      required:
      - from
      - incomingLetterNo
      - letterDate
      - njsInwardNo
      - projectId
      - receiptDate
      - subject
      type: object
      properties:
        projectId:
          type: integer
          format: int32
        incomingLetterNo:
          maxLength: 255
          minLength: 0
          type: string
        letterDate:
          type: string
          format: date-time
        njsInwardNo:
          maxLength: 255
          minLength: 0
          type: string
        receiptDate:
          type: string
          format: date-time
        from:
          maxLength: 255
          minLength: 0
          type: string
        subject:
          maxLength: 500
          minLength: 0
          type: string
        attachmentDetails:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        actionTaken:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        storagePath:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        remarks:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        repliedDate:
          type: string
          format: date-time
          nullable: true
        createdBy:
          type: string
          nullable: true
      additionalProperties: false
    CreateCorrespondenceOutwardCommand:
      required:
      - letterDate
      - letterNo
      - projectId
      - subject
      - to
      type: object
      properties:
        projectId:
          type: integer
          format: int32
        letterNo:
          maxLength: 255
          minLength: 0
          type: string
        letterDate:
          type: string
          format: date-time
        to:
          maxLength: 255
          minLength: 0
          type: string
        subject:
          maxLength: 500
          minLength: 0
          type: string
        attachmentDetails:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        actionTaken:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        storagePath:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        remarks:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        acknowledgement:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
      additionalProperties: false
    CreateFeasibilityStudyCommand:
      type: object
      properties:
        projectId:
          type: integer
          format: int32
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        methodology:
          type: string
          nullable: true
        findings:
          type: string
          nullable: true
        recommendations:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
      additionalProperties: false
    CreateGoNoGoVersionDto:
      type: object
      properties:
        versionNumber:
          type: integer
          format: int32
        goNoGoDecisionHeaderId:
          type: integer
          format: int32
        formData:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/GoNoGoVersionStatus'
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        approvedBy:
          type: string
          nullable: true
        approvedAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    CreateInputRegisterCommand:
      required:
      - check
      - dataReceived
      - filesFormat
      - fitForPurpose
      - noOfFiles
      - receiptDate
      - receivedFrom
      type: object
      properties:
        projectId:
          type: integer
          format: int32
        dataReceived:
          maxLength: 255
          minLength: 0
          type: string
        receiptDate:
          type: string
          format: date-time
        receivedFrom:
          maxLength: 255
          minLength: 0
          type: string
        filesFormat:
          maxLength: 100
          minLength: 0
          type: string
        noOfFiles:
          type: integer
          format: int32
        fitForPurpose:
          type: boolean
        check:
          type: boolean
        checkedBy:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        checkedDate:
          type: string
          format: date-time
          nullable: true
        custodian:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        storagePath:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        remarks:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
      additionalProperties: false
    CreateOpportunityTrackingCommand:
      type: object
      properties:
        stage:
          $ref: '#/components/schemas/OpportunityStage'
        strategicRanking:
          type: string
          nullable: true
        bidFees:
          type: number
          format: double
          nullable: true
        emd:
          type: number
          format: double
          nullable: true
        formOfEMD:
          type: string
          nullable: true
        bidManagerId:
          type: string
          nullable: true
        reviewManagerId:
          type: string
          nullable: true
        approvalManagerId:
          type: string
          nullable: true
        contactPersonAtClient:
          type: string
          nullable: true
        dateOfSubmission:
          type: string
          format: date-time
          nullable: true
        percentageChanceOfProjectHappening:
          type: number
          format: double
          nullable: true
        percentageChanceOfNJSSuccess:
          type: number
          format: double
          nullable: true
        likelyCompetition:
          type: string
          nullable: true
        grossRevenue:
          type: number
          format: double
          nullable: true
        netNJSRevenue:
          type: number
          format: double
          nullable: true
        followUpComments:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        probableQualifyingCriteria:
          type: string
          nullable: true
        operation:
          type: string
          nullable: true
        workName:
          type: string
          nullable: true
        client:
          type: string
          nullable: true
        clientSector:
          type: string
          nullable: true
        likelyStartDate:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/OpportunityTrackingStatus'
        currency:
          type: string
          nullable: true
        capitalValue:
          type: number
          format: double
        durationOfProject:
          type: integer
          format: int32
        fundingStream:
          type: string
          nullable: true
        contractType:
          type: string
          nullable: true
      additionalProperties: false
    CreateUserCommand:
      type: object
      properties:
        userName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        standardRate:
          type: number
          format: double
        isConsultant:
          type: boolean
        roles:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/RoleDto'
        avatar:
          type: string
          nullable: true
      additionalProperties: false
    CriteriaItem:
      type: object
      properties:
        comments:
          type: string
          nullable: true
        score:
          type: integer
          format: int32
        scoringDescriptionId:
          type: integer
          format: int32
      additionalProperties: false
    CurrentBudgetInMISDto:
      type: object
      properties:
        revenueFee:
          type: number
          format: double
        cost:
          type: number
          format: double
        profitPercentage:
          type: number
          format: double
      additionalProperties: false
    CurrentMonthActionDto:
      type: object
      properties:
        cMactions:
          type: string
          nullable: true
        cmAdate:
          type: string
          format: date-time
        cmAcomments:
          type: string
          nullable: true
        cmApriority:
          type: string
          nullable: true
      additionalProperties: false
    FeasibilityStudy:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        projectDetails:
          type: string
          nullable: true
        strategicRanking:
          type: integer
          format: int32
        financialInformation:
          type: number
          format: double
        studyDate:
          type: string
          format: date-time
        probabilityAssessment:
          type: number
          format: double
        competitionAnalysis:
          type: string
          nullable: true
        fundingStream:
          type: string
          nullable: true
        contractType:
          type: string
          nullable: true
        qualifyingCriteria:
          type: string
          nullable: true
        project:
          $ref: '#/components/schemas/Project'
      additionalProperties: false
    FinancialDetailsDto:
      type: object
      properties:
        net:
          type: number
          format: double
        serviceTax:
          type: number
          format: double
        feeTotal:
          type: number
          format: double
        budgetOdcs:
          type: number
          format: double
        budgetStaff:
          type: number
          format: double
        budgetSubTotal:
          type: number
          format: double
      additionalProperties: false
    FormType:
      type: integer
      format: int32
      enum:
      - 0
      - 1
    GoNoGoDecision:
      required:
      - bidScheduleComments
      - bidScheduleScore
      - bidType
      - clientRelationshipComments
      - clientRelationshipScore
      - competitionAssessmentComments
      - competitionAssessmentScore
      - competitivePositionComments
      - competitivePositionScore
      - completedBy
      - completedDate
      - createdAt
      - createdBy
      - emdAmount
      - financialEligibilityComments
      - financialEligibilityScore
      - futureWorkPotentialComments
      - futureWorkPotentialScore
      - marketingPlanComments
      - marketingPlanScore
      - profitabilityComments
      - profitabilityScore
      - projectId
      - projectKnowledgeComments
      - projectKnowledgeScore
      - resourceAvailabilityComments
      - resourceAvailabilityScore
      - sector
      - staffAvailabilityComments
      - staffAvailabilityScore
      - status
      - technicalEligibilityComments
      - technicalEligibilityScore
      - tenderFee
      - totalScore
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        project:
          $ref: '#/components/schemas/Project'
        bidType:
          maxLength: 50
          minLength: 0
          type: string
        sector:
          maxLength: 50
          minLength: 0
          type: string
        tenderFee:
          type: number
          format: double
        emdAmount:
          type: number
          format: double
        marketingPlanScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        marketingPlanComments:
          maxLength: 1000
          minLength: 0
          type: string
        clientRelationshipScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        clientRelationshipComments:
          maxLength: 1000
          minLength: 0
          type: string
        projectKnowledgeScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        projectKnowledgeComments:
          maxLength: 1000
          minLength: 0
          type: string
        technicalEligibilityScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        technicalEligibilityComments:
          maxLength: 1000
          minLength: 0
          type: string
        financialEligibilityScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        financialEligibilityComments:
          maxLength: 1000
          minLength: 0
          type: string
        staffAvailabilityScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        staffAvailabilityComments:
          maxLength: 1000
          minLength: 0
          type: string
        competitionAssessmentScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        competitionAssessmentComments:
          maxLength: 1000
          minLength: 0
          type: string
        competitivePositionScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        competitivePositionComments:
          maxLength: 1000
          minLength: 0
          type: string
        futureWorkPotentialScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        futureWorkPotentialComments:
          maxLength: 1000
          minLength: 0
          type: string
        profitabilityScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        profitabilityComments:
          maxLength: 1000
          minLength: 0
          type: string
        resourceAvailabilityScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        resourceAvailabilityComments:
          maxLength: 1000
          minLength: 0
          type: string
        bidScheduleScore:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        bidScheduleComments:
          maxLength: 1000
          minLength: 0
          type: string
        totalScore:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/GoNoGoStatus'
        decisionComments:
          maxLength: 2000
          minLength: 0
          type: string
          nullable: true
        completedDate:
          type: string
          format: date-time
        completedBy:
          maxLength: 100
          minLength: 0
          type: string
        reviewedDate:
          type: string
          format: date-time
          nullable: true
        reviewedBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        approvedDate:
          type: string
          format: date-time
          nullable: true
        approvedBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        actionPlan:
          maxLength: 2000
          minLength: 0
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        createdBy:
          maxLength: 100
          minLength: 0
          type: string
        lastModifiedAt:
          type: string
          format: date-time
          nullable: true
        lastModifiedBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
      additionalProperties: false
    GoNoGoDecisionHeader:
      type: object
      properties:
        id:
          type: integer
          format: int32
        typeOfBid:
          $ref: '#/components/schemas/TypeOfBid'
        sector:
          type: string
          nullable: true
        bdHead:
          type: string
          nullable: true
        office:
          type: string
          nullable: true
        regionalBDHead:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
        typeOfClient:
          type: string
          nullable: true
        tenderFee:
          type: number
          format: double
        emd:
          type: number
          format: double
        totalScore:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/GoNoGoStatus'
        opportunityId:
          type: integer
          format: int32
        opportunityTracking:
          $ref: '#/components/schemas/OpportunityTracking'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
        currentVersion:
          type: integer
          format: int32
          nullable: true
        versionStatus:
          $ref: '#/components/schemas/GoNoGoVersionStatus'
        versions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/GoNoGoVersion'
      additionalProperties: false
    GoNoGoDecisionOpportunity:
      type: object
      properties:
        id:
          type: integer
          format: int32
        typeOfBid:
          $ref: '#/components/schemas/TypeOfBid'
        sector:
          type: string
          nullable: true
        bdHead:
          type: string
          nullable: true
        office:
          type: string
          nullable: true
        regionalBDHead:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
        typeOfClient:
          type: string
          nullable: true
        enderFee:
          type: string
          nullable: true
        emd:
          type: string
          nullable: true
        opportunityId:
          type: integer
          format: int32
        scoringCriteriaId:
          type: integer
          format: int32
          nullable: true
        scoringCriterias:
          $ref: '#/components/schemas/ScoringCriteria'
        scoreRangeId:
          type: integer
          format: int32
          nullable: true
        scoreRanges:
          $ref: '#/components/schemas/ScoreRange'
      additionalProperties: false
    GoNoGoForm:
      type: object
      properties:
        headerInfo:
          $ref: '#/components/schemas/HeaderInfo'
        metaData:
          $ref: '#/components/schemas/MetaData'
        scoringCriteria:
          $ref: '#/components/schemas/ScoringCriteriaDto'
        summary:
          $ref: '#/components/schemas/Summary'
      additionalProperties: false
    GoNoGoStatus:
      type: integer
      format: int32
      enum:
      - 0
      - 1
      - 2
    GoNoGoVersion:
      type: object
      properties:
        id:
          type: integer
          format: int32
        goNoGoDecisionHeaderId:
          type: integer
          format: int32
        goNoGoDecisionHeader:
          $ref: '#/components/schemas/GoNoGoDecisionHeader'
        versionNumber:
          type: integer
          format: int32
        formData:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/GoNoGoVersionStatus'
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        approvedBy:
          type: string
          nullable: true
        approvedAt:
          type: string
          format: date-time
          nullable: true
        comments:
          type: string
          nullable: true
        actonBy:
          type: string
          nullable: true
      additionalProperties: false
    GoNoGoVersionDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        goNoGoDecisionHeaderId:
          type: integer
          format: int32
        versionNumber:
          type: integer
          format: int32
        formData:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/GoNoGoVersionStatus'
        createdBy:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        approvedBy:
          type: string
          nullable: true
        approvedAt:
          type: string
          format: date-time
          nullable: true
        comments:
          type: string
          nullable: true
      additionalProperties: false
    GoNoGoVersionStatus:
      type: integer
      format: int32
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
    HeaderInfo:
      type: object
      properties:
        typeOfBid:
          $ref: '#/components/schemas/TypeOfBid'
        sector:
          type: string
          nullable: true
        bdHead:
          type: string
          nullable: true
        office:
          type: string
          nullable: true
        tenderFee:
          type: integer
          format: int32
        emd:
          type: integer
          format: int32
      additionalProperties: false
    InputRegisterDto:
      required:
      - check
      - dataReceived
      - filesFormat
      - fitForPurpose
      - noOfFiles
      - receiptDate
      - receivedFrom
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        dataReceived:
          maxLength: 255
          minLength: 0
          type: string
        receiptDate:
          type: string
          format: date-time
        receivedFrom:
          maxLength: 255
          minLength: 0
          type: string
        filesFormat:
          maxLength: 100
          minLength: 0
          type: string
        noOfFiles:
          type: integer
          format: int32
        fitForPurpose:
          type: boolean
        check:
          type: boolean
        checkedBy:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        checkedDate:
          type: string
          format: date-time
          nullable: true
        custodian:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        storagePath:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        remarks:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        createdBy:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    JobStartForm:
      required:
      - projectId
      type: object
      properties:
        formId:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        project:
          $ref: '#/components/schemas/Project'
        workBreakdownStructureId:
          type: integer
          format: int32
          nullable: true
        workBreakdownStructure:
          $ref: '#/components/schemas/WorkBreakdownStructure'
        formTitle:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        preparedBy:
          type: string
          nullable: true
        totalTimeCost:
          type: number
          format: double
        totalExpenses:
          type: number
          format: double
        grandTotal:
          type: number
          format: double
        projectFees:
          type: number
          format: double
        serviceTaxPercentage:
          type: number
          format: double
        serviceTaxAmount:
          type: number
          format: double
        totalProjectFees:
          type: number
          format: double
        profit:
          type: number
          format: double
        selections:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/JobStartFormSelection'
        resources:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/JobStartFormResource'
        header:
          $ref: '#/components/schemas/JobStartFormHeader'
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
          nullable: true
        isDeleted:
          type: boolean
      additionalProperties: false
    JobStartFormDto:
      type: object
      properties:
        formId:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        workBreakdownStructureId:
          type: integer
          format: int32
          nullable: true
        formTitle:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
        preparedBy:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
          nullable: true
        totalTimeCost:
          type: number
          format: double
        totalExpenses:
          type: number
          format: double
        serviceTaxPercentage:
          type: number
          format: double
        serviceTaxAmount:
          type: number
          format: double
        grandTotal:
          type: number
          format: double
        projectFees:
          type: number
          format: double
        totalProjectFees:
          type: number
          format: double
        profit:
          type: number
          format: double
        selections:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/JobStartFormSelectionDto'
        resources:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/JobStartFormResourceDto'
      additionalProperties: false
    JobStartFormHeader:
      required:
      - formId
      type: object
      properties:
        id:
          type: integer
          format: int32
        formId:
          type: integer
          format: int32
        jobStartForm:
          $ref: '#/components/schemas/JobStartForm'
        projectId:
          type: integer
          format: int32
        project:
          $ref: '#/components/schemas/Project'
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        statusId:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PMWorkflowStatus'
        jobStartFormHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/JobStartFormHistory'
      additionalProperties: false
    JobStartFormHistory:
      required:
      - jobStartFormHeaderId
      - statusId
      type: object
      properties:
        id:
          type: integer
          format: int32
        jobStartFormHeaderId:
          type: integer
          format: int32
        jobStartFormHeader:
          $ref: '#/components/schemas/JobStartFormHeader'
        statusId:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PMWorkflowStatus'
        action:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        actionDate:
          type: string
          format: date-time
        actionBy:
          maxLength: 450
          minLength: 0
          type: string
          nullable: true
        actionUser:
          $ref: '#/components/schemas/User'
        assignedToId:
          maxLength: 450
          minLength: 0
          type: string
          nullable: true
        assignedTo:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    JobStartFormResource:
      required:
      - formId
      type: object
      properties:
        resourceId:
          type: integer
          format: int32
        formId:
          type: integer
          format: int32
        jobStartForm:
          $ref: '#/components/schemas/JobStartForm'
        wbsTaskId:
          type: integer
          format: int32
          nullable: true
        taskType:
          type: integer
          format: int32
        description:
          type: string
          nullable: true
        rate:
          type: number
          format: double
        units:
          type: number
          format: double
        budgetedCost:
          type: number
          format: double
        remarks:
          type: string
          nullable: true
        employeeName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
          nullable: true
        isDeleted:
          type: boolean
      additionalProperties: false
    JobStartFormResourceDto:
      type: object
      properties:
        resourceId:
          type: integer
          format: int32
        formId:
          type: integer
          format: int32
        wbsTaskId:
          type: integer
          format: int32
          nullable: true
        taskType:
          type: integer
          format: int32
        description:
          type: string
          nullable: true
        rate:
          type: number
          format: double
        units:
          type: number
          format: double
        budgetedCost:
          type: number
          format: double
        remarks:
          type: string
          nullable: true
        employeeName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    JobStartFormSelection:
      required:
      - formId
      type: object
      properties:
        selectionId:
          type: integer
          format: int32
        formId:
          type: integer
          format: int32
        jobStartForm:
          $ref: '#/components/schemas/JobStartForm'
        optionCategory:
          type: string
          nullable: true
        optionName:
          type: string
          nullable: true
        isSelected:
          type: boolean
        notes:
          type: string
          nullable: true
      additionalProperties: false
    JobStartFormSelectionDto:
      type: object
      properties:
        selectionId:
          type: integer
          format: int32
        formId:
          type: integer
          format: int32
        optionCategory:
          type: string
          nullable: true
        optionName:
          type: string
          nullable: true
        isSelected:
          type: boolean
        notes:
          type: string
          nullable: true
      additionalProperties: false
    LastMonthActionDto:
      type: object
      properties:
        lMactions:
          type: string
          nullable: true
        lmAdate:
          type: string
          format: date-time
        lmAcomments:
          type: string
          nullable: true
      additionalProperties: false
    LoginModel:
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    ManpowerPlanningDto:
      type: object
      properties:
        workAssignment:
          type: string
          nullable: true
        assigneesJson:
          type: string
          nullable: true
        planned:
          type: number
          format: double
          nullable: true
        consumed:
          type: number
          format: double
          nullable: true
        balance:
          type: number
          format: double
          nullable: true
        nextMonthPlanning:
          type: number
          format: double
          nullable: true
        manpowerComments:
          type: string
          nullable: true
      additionalProperties: false
    ManpowerResourceDto:
      type: object
      properties:
        taskId:
          type: string
          nullable: true
        taskTitle:
          type: string
          nullable: true
        roleId:
          type: string
          nullable: true
        employeeId:
          type: string
          nullable: true
        employeeName:
          type: string
          nullable: true
        isConsultant:
          type: boolean
        costRate:
          type: number
          format: double
        totalHours:
          type: number
          format: double
        totalCost:
          type: number
          format: double
        monthlyHours:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/MonthlyHourDto'
      additionalProperties: false
    ManpowerResourcesWithMonthlyHoursDto:
      type: object
      properties:
        projectId:
          type: integer
          format: int32
        resources:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ManpowerResourceDto'
      additionalProperties: false
    MetaData:
      type: object
      properties:
        opprotunityId:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        completedDate:
          type: string
          nullable: true
        completedBy:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
      additionalProperties: false
    MonthlyHourData:
      type: object
      properties:
        year:
          type: string
          nullable: true
        month:
          type: string
          nullable: true
        plannedHours:
          type: number
          format: double
      additionalProperties: false
    MonthlyHourDto:
      type: object
      properties:
        year:
          type: integer
          format: int32
        month:
          type: string
          nullable: true
        plannedHours:
          type: number
          format: double
      additionalProperties: false
    MonthlyProgressDto:
      type: object
      properties:
        financialDetails:
          $ref: '#/components/schemas/FinancialDetailsDto'
        contractAndCost:
          $ref: '#/components/schemas/ContractAndCostDto'
        ctceac:
          $ref: '#/components/schemas/CTCEACDto'
        schedule:
          $ref: '#/components/schemas/ScheduleDto'
        manpowerEntries:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ManpowerPlanningDto'
        manpowerTotal:
          type: number
          format: double
        progressDeliverables:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProgressDeliverableDto'
        changeOrders:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ChangeOrderDto'
        lastMonthActions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/LastMonthActionDto'
        currentMonthActions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/CurrentMonthActionDto'
        budgetTable:
          $ref: '#/components/schemas/BudgetTableDto'
      additionalProperties: false
    OpportunityHistory:
      type: object
      properties:
        id:
          type: integer
          format: int32
        opportunityId:
          type: integer
          format: int32
        opportunity:
          $ref: '#/components/schemas/OpportunityTracking'
        statusId:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/OpportunityStatus'
        action:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        actionDate:
          type: string
          format: date-time
        actionBy:
          type: string
          nullable: true
        actionUser:
          $ref: '#/components/schemas/User'
        assignedToId:
          type: string
          nullable: true
        assignedTo:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    OpportunityStage:
      type: integer
      format: int32
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
    OpportunityStatus:
      type: object
      properties:
        id:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        opportunityHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/OpportunityHistory'
      additionalProperties: false
    OpportunityTracking:
      required:
      - client
      - clientSector
      - contractType
      - currency
      - fundingStream
      - operation
      - status
      - strategicRanking
      - workName
      type: object
      properties:
        id:
          type: integer
          format: int32
        bidNumber:
          type: string
          nullable: true
        strategicRanking:
          minLength: 1
          type: string
        bidFees:
          type: number
          format: double
          nullable: true
        emd:
          type: number
          format: double
          nullable: true
        formOfEMD:
          type: string
          nullable: true
        bidManagerId:
          type: string
          nullable: true
        reviewManagerId:
          type: string
          nullable: true
        approvalManagerId:
          type: string
          nullable: true
        contactPersonAtClient:
          type: string
          nullable: true
        dateOfSubmission:
          type: string
          format: date-time
          nullable: true
        percentageChanceOfProjectHappening:
          type: number
          format: double
          nullable: true
        percentageChanceOfNJSSuccess:
          type: number
          format: double
          nullable: true
        likelyCompetition:
          type: string
          nullable: true
        grossRevenue:
          type: number
          format: double
          nullable: true
        netNJSRevenue:
          type: number
          format: double
          nullable: true
        followUpComments:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        probableQualifyingCriteria:
          type: string
          nullable: true
        operation:
          minLength: 1
          type: string
        workName:
          minLength: 1
          type: string
        client:
          minLength: 1
          type: string
        clientSector:
          minLength: 1
          type: string
        likelyStartDate:
          type: string
          format: date-time
        stage:
          $ref: '#/components/schemas/OpportunityStage'
        status:
          $ref: '#/components/schemas/OpportunityTrackingStatus'
        currency:
          minLength: 1
          type: string
        capitalValue:
          type: number
          format: double
        durationOfProject:
          type: integer
          format: int32
        fundingStream:
          minLength: 1
          type: string
        contractType:
          minLength: 1
          type: string
        bidManager:
          $ref: '#/components/schemas/User'
        reviewManager:
          $ref: '#/components/schemas/User'
        approvalManager:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
        opportunityHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/OpportunityHistory'
      additionalProperties: false
    OpportunityTrackingStatus:
      type: integer
      format: int32
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
    OriginalBudgetDto:
      type: object
      properties:
        revenueFee:
          type: number
          format: double
        cost:
          type: number
          format: double
        profitPercentage:
          type: number
          format: double
      additionalProperties: false
    PMWorkflowDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        entityId:
          type: integer
          format: int32
        entityType:
          type: string
          nullable: true
        statusId:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        actionDate:
          type: string
          format: date-time
        actionBy:
          type: string
          nullable: true
        actionByName:
          type: string
          nullable: true
        assignedToId:
          type: string
          nullable: true
        assignedToName:
          type: string
          nullable: true
      additionalProperties: false
    PMWorkflowHistoryDto:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        entityType:
          type: string
          nullable: true
        currentStatusId:
          type: integer
          format: int32
        currentStatus:
          type: string
          nullable: true
        history:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/PMWorkflowDto'
      additionalProperties: false
    PMWorkflowStatus:
      type: object
      properties:
        id:
          type: integer
          format: int32
        status:
          type: string
          nullable: true
        changeControlHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ChangeControlWorkflowHistory'
        projectClosureHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProjectClosureWorkflowHistory'
        wbsHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSHistory'
        changeControls:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ChangeControl'
        projectClosures:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProjectClosure'
      additionalProperties: false
    PercentCompleteOnCostsDto:
      type: object
      properties:
        revenueFee:
          type: number
          format: double
        cost:
          type: number
          format: double
        profitPercentage:
          type: number
          format: double
      additionalProperties: false
    PermissionCategoryGroup:
      type: object
      properties:
        category:
          type: string
          nullable: true
        permissions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/PermissionDto'
      additionalProperties: false
    PermissionDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
        roles:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/RolePermissionDto'
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    ProgressDeliverableDto:
      type: object
      properties:
        milestone:
          type: string
          nullable: true
        dueDateContract:
          type: string
          format: date-time
        dueDatePlanned:
          type: string
          format: date-time
        achievedDate:
          type: string
          format: date-time
        paymentDue:
          type: number
          format: double
        invoiceDate:
          type: string
          format: date-time
        paymentReceivedDate:
          type: string
          format: date-time
        deliverableComments:
          type: string
          nullable: true
      additionalProperties: false
    Project:
      required:
      - clientName
      - createdAt
      - createdBy
      - currency
      - feeType
      - name
      - office
      - priority
      - region
      - sector
      - status
      - typeOfClient
      - typeOfJob
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          maxLength: 100
          minLength: 0
          type: string
        projectNo:
          type: integer
          format: int32
        clientName:
          maxLength: 100
          minLength: 0
          type: string
        typeOfClient:
          maxLength: 50
          minLength: 0
          type: string
        projectManagerId:
          type: string
          nullable: true
        projectManager:
          $ref: '#/components/schemas/User'
        seniorProjectManagerId:
          type: string
          nullable: true
        seniorProjectManager:
          $ref: '#/components/schemas/User'
        regionalManagerId:
          type: string
          nullable: true
        regionalManager:
          $ref: '#/components/schemas/User'
        office:
          maxLength: 100
          minLength: 0
          type: string
        region:
          maxLength: 100
          minLength: 0
          type: string
        typeOfJob:
          maxLength: 100
          minLength: 0
          type: string
        sector:
          maxLength: 50
          minLength: 0
          type: string
        feeType:
          maxLength: 50
          minLength: 0
          type: string
        estimatedCost:
          type: number
          format: double
        budget:
          type: number
          format: double
        priority:
          maxLength: 50
          minLength: 0
          type: string
        currency:
          maxLength: 3
          minLength: 0
          type: string
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        capitalValue:
          type: number
          format: double
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatus'
        progress:
          type: integer
          format: int32
        durationInMonths:
          type: integer
          format: int32
          nullable: true
        fundingStream:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        contractType:
          maxLength: 50
          minLength: 0
          type: string
          nullable: true
        opportunityTrackingId:
          type: integer
          format: int32
          nullable: true
        opportunityTracking:
          $ref: '#/components/schemas/OpportunityTracking'
        projectResources:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProjectResource'
        createdAt:
          type: string
          format: date-time
        createdBy:
          maxLength: 100
          minLength: 0
          type: string
        lastModifiedAt:
          type: string
          format: date-time
          nullable: true
        lastModifiedBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
          nullable: true
        isDeleted:
          type: boolean
        letterOfAcceptance:
          type: boolean
      additionalProperties: false
    ProjectClosure:
      required:
      - projectId
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        project:
          $ref: '#/components/schemas/Project'
        clientFeedback:
          type: string
          nullable: true
        successCriteria:
          type: string
          nullable: true
        clientExpectations:
          type: string
          nullable: true
        otherStakeholders:
          type: string
          nullable: true
        envIssues:
          type: string
          nullable: true
        envManagement:
          type: string
          nullable: true
        thirdPartyIssues:
          type: string
          nullable: true
        thirdPartyManagement:
          type: string
          nullable: true
        riskIssues:
          type: string
          nullable: true
        riskManagement:
          type: string
          nullable: true
        knowledgeGoals:
          type: string
          nullable: true
        baselineComparison:
          type: string
          nullable: true
        delayedDeliverables:
          type: string
          nullable: true
        unforeseeableDelays:
          type: string
          nullable: true
        budgetEstimate:
          type: string
          nullable: true
        profitTarget:
          type: string
          nullable: true
        changeOrders:
          type: string
          nullable: true
        closeOutBudget:
          type: string
          nullable: true
        resourceAvailability:
          type: string
          nullable: true
        vendorFeedback:
          type: string
          nullable: true
        projectTeamFeedback:
          type: string
          nullable: true
        designOutputs:
          type: string
          nullable: true
        projectReviewMeetings:
          type: string
          nullable: true
        clientDesignReviews:
          type: string
          nullable: true
        internalReporting:
          type: string
          nullable: true
        clientReporting:
          type: string
          nullable: true
        internalMeetings:
          type: string
          nullable: true
        clientMeetings:
          type: string
          nullable: true
        externalMeetings:
          type: string
          nullable: true
        planUpToDate:
          type: string
          nullable: true
        planUseful:
          type: string
          nullable: true
        hindrances:
          type: string
          nullable: true
        clientPayment:
          type: string
          nullable: true
        planningIssues:
          type: string
          nullable: true
        planningLessons:
          type: string
          nullable: true
        briefAims:
          type: string
          nullable: true
        designReviewOutputs:
          type: string
          nullable: true
        constructabilityReview:
          type: string
          nullable: true
        designReview:
          type: string
          nullable: true
        technicalRequirements:
          type: string
          nullable: true
        innovativeIdeas:
          type: string
          nullable: true
        suitableOptions:
          type: string
          nullable: true
        additionalInformation:
          type: string
          nullable: true
        deliverableExpectations:
          type: string
          nullable: true
        stakeholderInvolvement:
          type: string
          nullable: true
        knowledgeGoalsAchieved:
          type: string
          nullable: true
        technicalToolsDissemination:
          type: string
          nullable: true
        specialistKnowledgeValue:
          type: string
          nullable: true
        otherComments:
          type: string
          nullable: true
        targetCostAccuracyValue:
          type: boolean
          nullable: true
        targetCostAccuracy:
          type: string
          nullable: true
        changeControlReviewValue:
          type: boolean
          nullable: true
        changeControlReview:
          type: string
          nullable: true
        compensationEventsValue:
          type: boolean
          nullable: true
        compensationEvents:
          type: string
          nullable: true
        expenditureProfileValue:
          type: boolean
          nullable: true
        expenditureProfile:
          type: string
          nullable: true
        healthSafetyConcernsValue:
          type: boolean
          nullable: true
        healthSafetyConcerns:
          type: string
          nullable: true
        programmeRealisticValue:
          type: boolean
          nullable: true
        programmeRealistic:
          type: string
          nullable: true
        programmeUpdatesValue:
          type: boolean
          nullable: true
        programmeUpdates:
          type: string
          nullable: true
        requiredQualityValue:
          type: boolean
          nullable: true
        requiredQuality:
          type: string
          nullable: true
        operationalRequirementsValue:
          type: boolean
          nullable: true
        operationalRequirements:
          type: string
          nullable: true
        constructionInvolvementValue:
          type: boolean
          nullable: true
        constructionInvolvement:
          type: string
          nullable: true
        efficienciesValue:
          type: boolean
          nullable: true
        efficiencies:
          type: string
          nullable: true
        maintenanceAgreementsValue:
          type: boolean
          nullable: true
        maintenanceAgreements:
          type: string
          nullable: true
        asBuiltManualsValue:
          type: boolean
          nullable: true
        asBuiltManuals:
          type: string
          nullable: true
        hsFileForwardedValue:
          type: boolean
          nullable: true
        hsFileForwarded:
          type: string
          nullable: true
        variations:
          type: string
          nullable: true
        technoLegalIssues:
          type: string
          nullable: true
        constructionOther:
          type: string
          nullable: true
        positives:
          type: string
          nullable: true
        lessonsLearned:
          type: string
          nullable: true
        workflowStatusId:
          type: integer
          format: int32
        workflowStatus:
          $ref: '#/components/schemas/PMWorkflowStatus'
        workflowHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProjectClosureWorkflowHistory'
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    ProjectClosureDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        clientFeedback:
          type: string
          nullable: true
        successCriteria:
          type: string
          nullable: true
        clientExpectations:
          type: string
          nullable: true
        otherStakeholders:
          type: string
          nullable: true
        envIssues:
          type: string
          nullable: true
        envManagement:
          type: string
          nullable: true
        thirdPartyIssues:
          type: string
          nullable: true
        thirdPartyManagement:
          type: string
          nullable: true
        riskIssues:
          type: string
          nullable: true
        riskManagement:
          type: string
          nullable: true
        knowledgeGoals:
          type: string
          nullable: true
        baselineComparison:
          type: string
          nullable: true
        delayedDeliverables:
          type: string
          nullable: true
        unforeseeableDelays:
          type: string
          nullable: true
        budgetEstimate:
          type: string
          nullable: true
        profitTarget:
          type: string
          nullable: true
        changeOrders:
          type: string
          nullable: true
        closeOutBudget:
          type: string
          nullable: true
        resourceAvailability:
          type: string
          nullable: true
        vendorFeedback:
          type: string
          nullable: true
        projectTeamFeedback:
          type: string
          nullable: true
        designOutputs:
          type: string
          nullable: true
        projectReviewMeetings:
          type: string
          nullable: true
        clientDesignReviews:
          type: string
          nullable: true
        internalReporting:
          type: string
          nullable: true
        clientReporting:
          type: string
          nullable: true
        internalMeetings:
          type: string
          nullable: true
        clientMeetings:
          type: string
          nullable: true
        externalMeetings:
          type: string
          nullable: true
        planUpToDate:
          type: string
          nullable: true
        planUseful:
          type: string
          nullable: true
        hindrances:
          type: string
          nullable: true
        clientPayment:
          type: string
          nullable: true
        planningIssues:
          type: string
          nullable: true
        planningLessons:
          type: string
          nullable: true
        briefAims:
          type: string
          nullable: true
        designReviewOutputs:
          type: string
          nullable: true
        constructabilityReview:
          type: string
          nullable: true
        designReview:
          type: string
          nullable: true
        technicalRequirements:
          type: string
          nullable: true
        innovativeIdeas:
          type: string
          nullable: true
        suitableOptions:
          type: string
          nullable: true
        additionalInformation:
          type: string
          nullable: true
        deliverableExpectations:
          type: string
          nullable: true
        stakeholderInvolvement:
          type: string
          nullable: true
        knowledgeGoalsAchieved:
          type: string
          nullable: true
        technicalToolsDissemination:
          type: string
          nullable: true
        specialistKnowledgeValue:
          type: string
          nullable: true
        otherComments:
          type: string
          nullable: true
        targetCostAccuracyValue:
          type: boolean
          nullable: true
        targetCostAccuracy:
          type: string
          nullable: true
        changeControlReviewValue:
          type: boolean
          nullable: true
        changeControlReview:
          type: string
          nullable: true
        compensationEventsValue:
          type: boolean
          nullable: true
        compensationEvents:
          type: string
          nullable: true
        expenditureProfileValue:
          type: boolean
          nullable: true
        expenditureProfile:
          type: string
          nullable: true
        healthSafetyConcernsValue:
          type: boolean
          nullable: true
        healthSafetyConcerns:
          type: string
          nullable: true
        programmeRealisticValue:
          type: boolean
          nullable: true
        programmeRealistic:
          type: string
          nullable: true
        programmeUpdatesValue:
          type: boolean
          nullable: true
        programmeUpdates:
          type: string
          nullable: true
        requiredQualityValue:
          type: boolean
          nullable: true
        requiredQuality:
          type: string
          nullable: true
        operationalRequirementsValue:
          type: boolean
          nullable: true
        operationalRequirements:
          type: string
          nullable: true
        constructionInvolvementValue:
          type: boolean
          nullable: true
        constructionInvolvement:
          type: string
          nullable: true
        efficienciesValue:
          type: boolean
          nullable: true
        efficiencies:
          type: string
          nullable: true
        maintenanceAgreementsValue:
          type: boolean
          nullable: true
        maintenanceAgreements:
          type: string
          nullable: true
        asBuiltManualsValue:
          type: boolean
          nullable: true
        asBuiltManuals:
          type: string
          nullable: true
        hsFileForwardedValue:
          type: boolean
          nullable: true
        hsFileForwarded:
          type: string
          nullable: true
        variations:
          type: string
          nullable: true
        technoLegalIssues:
          type: string
          nullable: true
        constructionOther:
          type: string
          nullable: true
        positives:
          type: string
          nullable: true
        lessonsLearned:
          type: string
          nullable: true
        workflowStatusId:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        updatedBy:
          type: string
          nullable: true
        workflowHistory:
          $ref: '#/components/schemas/ProjectClosureWorkflowHistoryDto'
      additionalProperties: false
    ProjectClosureWorkflowHistory:
      required:
      - action
      - actionBy
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectClosureId:
          type: integer
          format: int32
        statusId:
          type: integer
          format: int32
        action:
          minLength: 1
          type: string
        comments:
          type: string
          nullable: true
        actionDate:
          type: string
          format: date-time
        actionBy:
          minLength: 1
          type: string
        assignedToId:
          type: string
          nullable: true
        projectClosure:
          $ref: '#/components/schemas/ProjectClosure'
        status:
          $ref: '#/components/schemas/PMWorkflowStatus'
        actionUser:
          $ref: '#/components/schemas/User'
        assignedTo:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    ProjectClosureWorkflowHistoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectClosureId:
          type: integer
          format: int32
        actionDate:
          type: string
          format: date-time
        comments:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        statusId:
          type: integer
          format: int32
        action:
          type: string
          nullable: true
        actionBy:
          type: string
          nullable: true
        assignedToId:
          type: string
          nullable: true
      additionalProperties: false
    ProjectDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        clientName:
          type: string
          nullable: true
        projectNo:
          type: integer
          format: int32
        typeOfClient:
          type: string
          nullable: true
        projectManagerId:
          type: string
          nullable: true
        seniorProjectManagerId:
          type: string
          nullable: true
        regionalManagerId:
          type: string
          nullable: true
        office:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
        typeOfJob:
          type: string
          nullable: true
        sector:
          type: string
          nullable: true
        feeType:
          type: string
          nullable: true
        estimatedCost:
          type: number
          format: double
        budget:
          type: number
          format: double
        priority:
          type: string
          nullable: true
        currency:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        capitalValue:
          type: number
          format: double
          nullable: true
        status:
          $ref: '#/components/schemas/ProjectStatus'
        progress:
          type: integer
          format: int32
        durationInMonths:
          type: integer
          format: int32
          nullable: true
        fundingStream:
          type: string
          nullable: true
        contractType:
          type: string
          nullable: true
        letterOfAcceptance:
          type: boolean
        opportunityTrackingId:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        lastModifiedAt:
          type: string
          format: date-time
          nullable: true
        lastModifiedBy:
          type: string
          nullable: true
      additionalProperties: false
    ProjectResource:
      required:
      - endDate
      - projectId
      - projectRate
      - startDate
      - userId
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        project:
          $ref: '#/components/schemas/Project'
        userId:
          minLength: 1
          type: string
        user:
          $ref: '#/components/schemas/User'
        projectRate:
          type: number
          format: double
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        allocationPercentage:
          type: number
          format: double
        notes:
          type: string
          nullable: true
      additionalProperties: false
    ProjectSendToApprovalCommand:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        entityType:
          type: string
          nullable: true
        assignedToId:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
      additionalProperties: false
    ProjectSendToReviewCommand:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        entityType:
          type: string
          nullable: true
        assignedToId:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
      additionalProperties: false
    ProjectStatus:
      type: integer
      format: int32
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
    RejectOpportunityCommand:
      type: object
      properties:
        opportunityId:
          type: integer
          format: int32
        assignedToId:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
      additionalProperties: false
    RequestChangesCommand:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        entityType:
          type: string
          nullable: true
        assignedToId:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        isApprovalChanges:
          type: boolean
          nullable: true
      additionalProperties: false
    RoleDefination:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        minRate:
          type: number
          format: double
        isResourceRole:
          type: boolean
        permissions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/PermissionCategoryGroup'
      additionalProperties: false
    RoleDto:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    RolePermissionDto:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    ScheduleDto:
      type: object
      properties:
        dateOfIssueWOLOI:
          type: string
          format: date-time
        completionDateAsPerContract:
          type: string
          format: date-time
        completionDateAsPerExtension:
          type: string
          format: date-time
        expectedCompletionDate:
          type: string
          format: date-time
      additionalProperties: false
    ScoreRange:
      type: object
      properties:
        id:
          type: integer
          format: int32
        value:
          type: integer
          format: int32
        label:
          type: string
          nullable: true
        range:
          type: string
          nullable: true
        goNoGoDecisionOpportunitiesScoring:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/GoNoGoDecisionOpportunity'
      additionalProperties: false
    ScoringCriteria:
      type: object
      properties:
        id:
          type: integer
          format: int32
        label:
          type: string
          nullable: true
        byWhom:
          type: string
          nullable: true
        byDate:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        score:
          type: integer
          format: int32
        showComments:
          type: boolean
          nullable: true
        goNoGoDecisionOpportunities:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/GoNoGoDecisionOpportunity'
      additionalProperties: false
    ScoringCriteriaDto:
      type: object
      properties:
        marketingPlan:
          $ref: '#/components/schemas/CriteriaItem'
        profitability:
          $ref: '#/components/schemas/CriteriaItem'
        projectKnowledge:
          $ref: '#/components/schemas/CriteriaItem'
        resourceAvailability:
          $ref: '#/components/schemas/CriteriaItem'
        staffAvailability:
          $ref: '#/components/schemas/CriteriaItem'
        technicalEligibility:
          $ref: '#/components/schemas/CriteriaItem'
        clientRelationship:
          $ref: '#/components/schemas/CriteriaItem'
        competitionAssessment:
          $ref: '#/components/schemas/CriteriaItem'
        competitivePosition:
          $ref: '#/components/schemas/CriteriaItem'
        futureWorkPotential:
          $ref: '#/components/schemas/CriteriaItem'
        bidSchedule:
          $ref: '#/components/schemas/CriteriaItem'
        financialEligibility:
          $ref: '#/components/schemas/CriteriaItem'
      additionalProperties: false
    ScoringDescriptionListModel:
      type: object
      properties:
        byWhom:
          type: string
          nullable: true
        byDate:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        score:
          type: integer
          format: int32
        showComments:
          type: boolean
      additionalProperties: false
    ScoringDescriptionModel:
      type: object
      properties:
        label:
          type: string
          nullable: true
        listModels:
          $ref: '#/components/schemas/ScoringDescriptionListModel'
      additionalProperties: false
    SendToApprovalCommand:
      type: object
      properties:
        opportunityId:
          type: integer
          format: int32
        assignedToId:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
      additionalProperties: false
    SendToApproveCommand:
      type: object
      properties:
        opportunityId:
          type: integer
          format: int32
        assignedToId:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
      additionalProperties: false
    SendToReviewCommand:
      type: object
      properties:
        opportunityId:
          type: integer
          format: int32
        assignedToId:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
      additionalProperties: false
    Summary:
      type: object
      properties:
        totalScore:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/GoNoGoStatus'
        decisionComments:
          type: string
          nullable: true
        actionPlan:
          type: string
          nullable: true
      additionalProperties: false
    TaskType:
      type: integer
      format: int32
      enum:
      - 0
      - 1
    TypeOfBid:
      type: integer
      format: int32
      enum:
      - 0
      - 1
    UpdateCheckReviewCommand:
      required:
      - activityName
      - activityNo
      - completion
      - id
      - objective
      - projectId
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        activityNo:
          maxLength: 50
          minLength: 0
          type: string
        activityName:
          maxLength: 255
          minLength: 0
          type: string
        documentNumber:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        documentName:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        objective:
          maxLength: 500
          minLength: 0
          type: string
        references:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        fileName:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        qualityIssues:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        completion:
          maxLength: 1
          minLength: 0
          type: string
        checkedBy:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        approvedBy:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        actionTaken:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        maker:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        checker:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    UpdateCorrespondenceInwardCommand:
      required:
      - from
      - id
      - incomingLetterNo
      - letterDate
      - njsInwardNo
      - projectId
      - receiptDate
      - subject
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        incomingLetterNo:
          maxLength: 255
          minLength: 0
          type: string
        letterDate:
          type: string
          format: date-time
        njsInwardNo:
          maxLength: 255
          minLength: 0
          type: string
        receiptDate:
          type: string
          format: date-time
        from:
          maxLength: 255
          minLength: 0
          type: string
        subject:
          maxLength: 500
          minLength: 0
          type: string
        attachmentDetails:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        actionTaken:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        storagePath:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        remarks:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        repliedDate:
          type: string
          format: date-time
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    UpdateCorrespondenceOutwardCommand:
      required:
      - id
      - letterDate
      - letterNo
      - projectId
      - subject
      - to
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        letterNo:
          maxLength: 255
          minLength: 0
          type: string
        letterDate:
          type: string
          format: date-time
        to:
          maxLength: 255
          minLength: 0
          type: string
        subject:
          maxLength: 500
          minLength: 0
          type: string
        attachmentDetails:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        actionTaken:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        storagePath:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        remarks:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        acknowledgement:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    UpdateInputRegisterCommand:
      required:
      - check
      - dataReceived
      - filesFormat
      - fitForPurpose
      - id
      - noOfFiles
      - projectId
      - receiptDate
      - receivedFrom
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        dataReceived:
          maxLength: 255
          minLength: 0
          type: string
        receiptDate:
          type: string
          format: date-time
        receivedFrom:
          maxLength: 255
          minLength: 0
          type: string
        filesFormat:
          maxLength: 100
          minLength: 0
          type: string
        noOfFiles:
          type: integer
          format: int32
        fitForPurpose:
          type: boolean
        check:
          type: boolean
        checkedBy:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        checkedDate:
          type: string
          format: date-time
          nullable: true
        custodian:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        storagePath:
          maxLength: 500
          minLength: 0
          type: string
          nullable: true
        remarks:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
      additionalProperties: false
    UpdateMonthlyHoursRequest:
      type: object
      properties:
        monthlyHours:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/MonthlyHourData'
      additionalProperties: false
    UpdateOpportunityTrackingCommand:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
          nullable: true
        stage:
          $ref: '#/components/schemas/OpportunityStage'
        strategicRanking:
          type: string
          nullable: true
        bidFees:
          type: number
          format: double
          nullable: true
        emd:
          type: number
          format: double
          nullable: true
        formOfEMD:
          type: string
          nullable: true
        bidManagerId:
          type: string
          nullable: true
        reviewManagerId:
          type: string
          nullable: true
        approvalManagerId:
          type: string
          nullable: true
        contactPersonAtClient:
          type: string
          nullable: true
        dateOfSubmission:
          type: string
          format: date-time
          nullable: true
        percentageChanceOfProjectHappening:
          type: number
          format: double
          nullable: true
        percentageChanceOfNJSSuccess:
          type: number
          format: double
          nullable: true
        likelyCompetition:
          type: string
          nullable: true
        grossRevenue:
          type: number
          format: double
          nullable: true
        netNJSRevenue:
          type: number
          format: double
          nullable: true
        followUpComments:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        probableQualifyingCriteria:
          type: string
          nullable: true
        operation:
          type: string
          nullable: true
        workName:
          type: string
          nullable: true
        client:
          type: string
          nullable: true
        clientSector:
          type: string
          nullable: true
        likelyStartDate:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/OpportunityTrackingStatus'
        currency:
          type: string
          nullable: true
        capitalValue:
          type: number
          format: double
        durationOfProject:
          type: integer
          format: int32
        fundingStream:
          type: string
          nullable: true
        contractType:
          type: string
          nullable: true
        workflowId:
          type: integer
          format: int32
      additionalProperties: false
    UpdateUserCommand:
      type: object
      properties:
        id:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        standardRate:
          type: number
          format: double
        isConsultant:
          type: boolean
        roles:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/RoleDto'
        avatar:
          type: string
          nullable: true
      additionalProperties: false
    User:
      type: object
      properties:
        id:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
        normalizedUserName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        normalizedEmail:
          type: string
          nullable: true
        emailConfirmed:
          type: boolean
        passwordHash:
          type: string
          nullable: true
        securityStamp:
          type: string
          nullable: true
        concurrencyStamp:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        phoneNumberConfirmed:
          type: boolean
        twoFactorEnabled:
          type: boolean
        lockoutEnd:
          type: string
          format: date-time
          nullable: true
        lockoutEnabled:
          type: boolean
        accessFailedCount:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        avatar:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time
          nullable: true
        standardRate:
          type: number
          format: double
          nullable: true
        isConsultant:
          type: boolean
        isActive:
          type: boolean
        userWBSTasks:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/UserWBSTask'
        projectResources:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ProjectResource'
        managedProjects:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Project'
        regionalManagerProjects:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Project'
        seniorManagedProjects:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Project'
        opportunityHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/OpportunityHistory'
      additionalProperties: false
    UserWBSTask:
      required:
      - wbsTaskId
      type: object
      properties:
        id:
          type: integer
          format: int32
        wbsTaskId:
          type: integer
          format: int32
        userId:
          maxLength: 450
          minLength: 0
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        costRate:
          type: number
          format: double
        unit:
          type: string
          nullable: true
        totalHours:
          type: number
          format: double
        totalCost:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
        createdBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        updatedBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        wbsTask:
          $ref: '#/components/schemas/WBSTask'
      additionalProperties: false
    WBSHistory:
      required:
      - statusId
      - wbsTaskMonthlyHourHeaderId
      type: object
      properties:
        id:
          type: integer
          format: int32
        wbsTaskMonthlyHourHeaderId:
          type: integer
          format: int32
        wbsTaskMonthlyHourHeader:
          $ref: '#/components/schemas/WBSTaskMonthlyHourHeader'
        statusId:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PMWorkflowStatus'
        action:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        actionDate:
          type: string
          format: date-time
        actionBy:
          maxLength: 450
          minLength: 0
          type: string
          nullable: true
        actionUser:
          $ref: '#/components/schemas/User'
        assignedToId:
          maxLength: 450
          minLength: 0
          type: string
          nullable: true
        assignedTo:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    WBSLevelOptionsDto:
      type: object
      properties:
        level1:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSOptionDto'
        level2:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSOptionDto'
        level3:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/WBSOptionDto'
          nullable: true
      additionalProperties: false
    WBSOptionDto:
      type: object
      properties:
        value:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
      additionalProperties: false
    WBSResourceAllocationDto:
      type: object
      properties:
        taskId:
          type: string
          nullable: true
        taskTitle:
          type: string
          nullable: true
        roleId:
          type: string
          nullable: true
        employeeId:
          type: string
          nullable: true
        employeeName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        isConsultant:
          type: boolean
        costRate:
          type: number
          format: double
        totalHours:
          type: number
          format: double
        totalCost:
          type: number
          format: double
        odc:
          type: number
          format: double
        taskType:
          type: integer
          format: int32
      additionalProperties: false
    WBSResourceDataDto:
      type: object
      properties:
        projectId:
          type: integer
          format: int32
        resourceAllocations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSResourceAllocationDto'
      additionalProperties: false
    WBSStructureDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        version:
          type: string
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        tasks:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSTaskDto'
      additionalProperties: false
    WBSTask:
      required:
      - level
      - title
      - workBreakdownStructureId
      type: object
      properties:
        id:
          type: integer
          format: int32
        workBreakdownStructureId:
          type: integer
          format: int32
        parentId:
          type: integer
          format: int32
          nullable: true
        level:
          $ref: '#/components/schemas/WBSTaskLevel'
        title:
          maxLength: 255
          minLength: 0
          type: string
        description:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        isDeleted:
          type: boolean
        createdAt:
          type: string
          format: date-time
        createdBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        updatedBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        estimatedBudget:
          type: number
          format: double
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        taskType:
          $ref: '#/components/schemas/TaskType'
        workBreakdownStructure:
          $ref: '#/components/schemas/WorkBreakdownStructure'
        parent:
          $ref: '#/components/schemas/WBSTask'
        children:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSTask'
        monthlyHours:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSTaskMonthlyHour'
        userWBSTasks:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/UserWBSTask'
      additionalProperties: false
    WBSTaskDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        workBreakdownStructureId:
          type: integer
          format: int32
        parentId:
          type: integer
          format: int32
          nullable: true
        level:
          $ref: '#/components/schemas/WBSTaskLevel'
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        displayOrder:
          type: integer
          format: int32
        estimatedBudget:
          type: number
          format: double
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        taskType:
          $ref: '#/components/schemas/TaskType'
        assignedUserId:
          type: string
          nullable: true
        assignedUserName:
          type: string
          nullable: true
        costRate:
          type: number
          format: double
        resourceName:
          type: string
          nullable: true
        resourceUnit:
          type: string
          nullable: true
        monthlyHours:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/MonthlyHourDto'
        totalHours:
          type: number
          format: double
        totalCost:
          type: number
          format: double
        frontendTempId:
          type: string
          nullable: true
        parentFrontendTempId:
          type: string
          nullable: true
      additionalProperties: false
    WBSTaskLevel:
      type: integer
      format: int32
      enum:
      - 1
      - 2
      - 3
    WBSTaskMonthlyHour:
      required:
      - month
      - wbsTaskId
      - year
      type: object
      properties:
        id:
          type: integer
          format: int32
        wbsTaskMonthlyHourHeaderId:
          type: integer
          format: int32
        wbsTaskMonthlyHourHeader:
          $ref: '#/components/schemas/WBSTaskMonthlyHourHeader'
        wbsTaskId:
          type: integer
          format: int32
        year:
          maxLength: 4
          minLength: 0
          type: string
        month:
          maxLength: 20
          minLength: 0
          type: string
        plannedHours:
          type: number
          format: double
        actualHours:
          type: number
          format: double
          nullable: true
        createdAt:
          type: string
          format: date-time
        createdBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        updatedBy:
          maxLength: 100
          minLength: 0
          type: string
          nullable: true
        wbsTask:
          $ref: '#/components/schemas/WBSTask'
      additionalProperties: false
    WBSTaskMonthlyHourHeader:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        project:
          $ref: '#/components/schemas/Project'
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        taskType:
          $ref: '#/components/schemas/TaskType'
        statusId:
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/PMWorkflowStatus'
        monthlyHours:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSTaskMonthlyHour'
        wbsHistories:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSHistory'
      additionalProperties: false
    WorkBreakdownStructure:
      type: object
      properties:
        id:
          type: integer
          format: int32
        projectId:
          type: integer
          format: int32
        structure:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        project:
          $ref: '#/components/schemas/Project'
        tasks:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/WBSTask'
        jobStartForms:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/JobStartForm'
      additionalProperties: false
